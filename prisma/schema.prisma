datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
enum Role {
  STUDENT
  LIBRARIAN
}
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          Role       @default(STUDENT)

  borrowedBooks Borrow[]
  bookRequests  BookRequest[]
  accounts      Account[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id           String     @id @default(cuid())
  title        String
  author       String
  isbn         String?    @unique
  description  String
  coverImage   String
  size         Int
  available    Boolean    @default(true)
  publishedAt  DateTime 
  categories   Category[]
  borrows      Borrow[]
  addedAt      DateTime @default(now())
  language     String 
  @@index([title, author]) // Composite index
  @@index([available])
  @@index([size])
  @@index([publishedAt])
}  
model BookRequest {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  requestedAt DateTime @default(now())
  title       String
  author      String
  isbn        String?
  releasedAt  DateTime?
  // Indexes
  @@index([userId])
  @@index([requestedAt])
}

model Borrow {
  id          String   @id @default(cuid())
  book        Book     @relation(fields: [bookId], references: [id])
  bookId      String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  borrowedAt  DateTime @default(now())
  dueDate     DateTime
  returnedAt  DateTime?
  
  // Indexes
  @@index([bookId])
  @@index([userId])
  @@index([dueDate])
} 
model contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  books Book[]
  
  @@index([name])
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 

 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

