services:
  postgres:
    image: postgres:15-alpine
    container_name: library_postgres
    restart: unless-stopped
    env_file:
      - .env.docker
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - library_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: deps
    container_name: library_migrate
    env_file:
      - .env.docker
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - library_network
    volumes:
      - ./drizzle:/app/drizzle
      - ./db:/app/db
      - ./src:/app/src
      - ./drizzle.config.json:/app/drizzle.config.json
      - ./drizzle.config.ts:/app/drizzle.config.ts
    command: sh -c "mkdir -p /app/drizzle && npx drizzle-kit generate && npx drizzle-kit migrate"

  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - DATABASE_URL=${DATABASE_URL}
        - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
        - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
        - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
        - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
        - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
        - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        - GeminiApiKey=${GeminiApiKey}
        - NEXT_SERVER_ACTIONS_ENCRYPTION_KEY=${NEXT_SERVER_ACTIONS_ENCRYPTION_KEY}
    container_name: library_app
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - .env.docker
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    networks:
      - library_network
    volumes:
      - ./uploads:/app/uploads
    dns:
      - 8.8.8.8
      - 8.8.4.4
    extra_hosts:
      - "host.docker.internal:host-gateway"

  adminer:
    image: adminer:latest
    container_name: library_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - library_network
    depends_on:
      - postgres

volumes:
  postgres_data:
    driver: local

networks:
  library_network:
    driver: bridge